{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD","App","useState","arrayValues","setArrayValues","sortField","setSortField","isReversed","setIsReversed","className","onClick","alphabetSort","sort","reverse","type","lenghtSort","value1","value2","length","current","map","item","ReactDOM","render","document","getElementById"],"mappings":"iOAIaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EACiB,sBADjBA,EAEY,iBAILC,EAAM,WACjB,MAAsCC,mBAASH,GAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAwCA,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QA1Ce,WACrB,IAAMC,EAAe,YAAIR,GAAaS,OAElCL,GACFI,EAAaE,UAGfT,EAAeO,GACfL,EAAaN,IAmCPc,KAAK,SACLL,UAAWJ,IAAcL,EACvB,iBAEA,0BANJ,iCAYA,wBACEU,QA3Ca,WACnB,IAAMK,EAAa,UAAIhB,GAAiBa,MACtC,SAACI,EAAQC,GAAT,OAAoBD,EAAOE,OAASD,EAAOC,UAGzCX,GACFQ,EAAWF,UAGbT,EAAeW,GACfT,EAAaN,IAkCPc,KAAK,SACLL,UAAWJ,IAAcL,EACvB,oBAEA,6BANJ,4BAYA,wBACEU,QAjCQ,WACdN,EAAe,YAAID,GAAaU,WAChCL,GAAc,SAAAW,GAAO,OAAKA,MAgCpBL,KAAK,SACLL,UAAWF,EACT,oBAEA,6BANJ,qBAYe,KAAdF,GAAoBE,EACnB,wBACEG,QAvDI,WACZN,EAAeL,GACfO,EAAa,IAETC,GACFC,GAAc,IAmDRM,KAAK,SACLL,UAAU,4BAHZ,mBAQA,QAIHN,EAAYiB,KAAI,SAAAC,GAAI,OACnB,6BACE,oBAAI,UAAQ,OAAZ,SAAoBA,KADbA,UCpHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a43c5925.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD = {\n  SORT_ALPHABETICALLY: 'Sort alphabetically',\n  SORT_BY_LENGTH: 'Sort by length',\n  REVERSE: 'Reverse',\n};\n\nexport const App = () => {\n  const [arrayValues, setArrayValues] = useState(goodsFromServer);\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n\n  const sortByAlphabet = () => {\n    const alphabetSort = [...arrayValues].sort();\n\n    if (isReversed) {\n      alphabetSort.reverse();\n    }\n\n    setArrayValues(alphabetSort);\n    setSortField(SORT_FIELD.SORT_ALPHABETICALLY);\n  };\n\n  const sortByLength = () => {\n    const lenghtSort = [...goodsFromServer].sort(\n      (value1, value2) => value1.length - value2.length,\n    );\n\n    if (isReversed) {\n      lenghtSort.reverse();\n    }\n\n    setArrayValues(lenghtSort);\n    setSortField(SORT_FIELD.SORT_BY_LENGTH);\n  };\n\n  const reset = () => {\n    setArrayValues(goodsFromServer);\n    setSortField('');\n\n    if (isReversed) {\n      setIsReversed(false);\n    }\n  };\n\n  const reverse = () => {\n    setArrayValues([...arrayValues].reverse());\n    setIsReversed(current => !current);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={sortByAlphabet}\n          type=\"button\"\n          className={sortField === SORT_FIELD.SORT_ALPHABETICALLY ? (\n            'button is-info'\n          ) : (\n            'button is-info is-light'\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={sortByLength}\n          type=\"button\"\n          className={sortField === SORT_FIELD.SORT_BY_LENGTH ? (\n            'button is-success'\n          ) : (\n            'button is-success is-light'\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={reverse}\n          type=\"button\"\n          className={isReversed ? (\n            'button is-warning'\n          ) : (\n            'button is-warning is-light'\n          )}\n        >\n          Reverse\n        </button>\n\n        {sortField !== '' || isReversed ? (\n          <button\n            onClick={reset}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        ) : (\n          null\n        )}\n\n      </div>\n      {arrayValues.map(item => (\n        <ul key={item}>\n          <li data-cy=\"Good\">{item}</li>\n        </ul>\n      ))}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}